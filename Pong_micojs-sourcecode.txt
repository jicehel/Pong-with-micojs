// Pong by Jicehel using micojs IDE
// https://micojs.github.io/
//
// Version for Gamebuino META
// https://gamebuino.com/
//
// source: 07/12/2022

// Define colors
const BLACK = setPen(0, 0, 0);
const RED = setPen(240, 0, 0);
const GREEN = setPen(0, 240, 0);
const GRAY = setPen(100, 100, 100);
const YELLOW = setPen(160,140, 80);
const TXT_COLOR = setPen(80, 0, 200);
const bgColor = setPen(BLACK);
const txtColor = setPen(TXT_COLOR);

let screenWidth, screenHeight;

class ball {
    init() {
        this.width = 4;
        this.height = 4;
        this.number = 1;
        this.maxXSpeed = 3;
        this.maxYSpeed = 3;
        this.color = YELLOW;
    }

    newball() {
        ponggame.ballLaunched = 0;
        ponggame.wait = ponggame.waitTime;
        this.x = (screenWidth  - this.width)  /2;
        this.y = (screenHeight - this.height) /2;
        this.speedX = 0;
        while (abs(this.speedX) < 2) {
            this.speedX = floor(rand(-3,4)); 
        }  
        this.speedY = 0;
        while (abs(this.speedY) < 2) {
            this.speedY = floor(rand(-3,4));
        }  
    }    

    update() {

        this.x += this.speedX;
        this.y += this.speedY;
        
        // Automatic bounce for y axis
        if((this.speedY < 0) && (this.y < 0)) {
            this.y = 0;
            this.speedY = -this.speedY;
        } else if((this.speedY > 0) && (this.y > (screenHeight - this.height))) {
            this.y = screenHeight - this.height;
            this.speedY = -this.speedY;
        }
    
        // Bounce only if ball is on paddle for x axis
        if((this.speedX < 0) && (this.x <= (lpaddle.x + lpaddle.width))) {
            if (((this.y + this.height) > lpaddle.y) && (this.y < (lpaddle.y + lpaddle.height)) ) {
                if (this.x > (lpaddle.x + 0.5 * lpaddle.width)) {
                    this.x = lpaddle.x + lpaddle.width;
                    this.speedX = -this.speedX;
                } else {
                    ponggame.rscore++;
                    this.newball();
                }    
            }
        } else if((this.speedX > 0) && ((this.x + this.width) > rpaddle.x)) {
            if (((this.y + this.height) > rpaddle.y) && (this.y < (rpaddle.y + rpaddle.height)) ) {
                if ((this.x + this.width) < (rpaddle.x + 0.5 * rpaddle.width)) {
                    this.x = rpaddle.x - this.width;
                    this.speedX = -this.speedX;
                } else {
                    ponggame.lscore++;
                    this.newball();    
                }    
            }
        }   

        // debug('BALL debug - x: ', this.x, '  y: ',this.y, '   speedX: ', this.speedX, '   speedY: ', this. speedY);
        
    }

    render() { 
        setPen(this.color);
         rect(this.x,this.y,this.width, this.height)
    }
}

class game {
    init() {
        this.lscore = 0;
        this.rscore = 0;
        this.gameover = 0;
        this.waitTime = 40;
        this.winscore = 3;
        this.color = GRAY;
    }

    update() {
        if (this.lscore >= this.winscore || this.rscore >= this.winscore)
            this.gameover = 1;
        if (this.ballLaunched == 0) {
            if (this.wait > 0)
                this.wait--;
            if(this.wait < 1)    
                this.ballLaunched = 1;
        }
    }

    render() {
        setPen(this.color);
        rect(0, 0, 1, screenHeight);
        rect(0, 0, screenWidth, 1);
        rect(screenWidth - 1, 0, 1, screenHeight);
        for (let i = 0; i < screenHeight; i = i + 30) {
            rect(screenWidth/2 - 1, i + 13, 1, 15);
        }
        rect(0, screenHeight - 1, screenWidth, 1);
    }
}

class paddle {
    init() {
        this.width = 4;
        this.height = 20;
        this.number = 1;
        this.x = screenWidth/2;
        this.y = (screenHeight - this.height) /2;
        this.maxXSpeed = 0;
        this.maxYSpeed = 3;
        this.speedX = 0;
        this.speedY = 0;
        this.color = GREEN;
    }

    update() {
        if(((this.number == 1 && UP) || (this.number == 2 && B)) && this.speedY > -this.maxYSpeed)
            this.speedY -=this.maxYSpeed;

        if(((this.number == 1 && DOWN) || (this.number == 2 && A)) && this.speedY < this.maxYSpeed)
            this.speedY +=this.maxYSpeed;    

        if(this.speedY < 0 && this.y > 0) {
            this.y += this.speedY;
            if(!(this.number == 1 && UP) || (this.number == 2 && B))
                this.speedY++;
        }
        
        if(this.y < 0) {
            this.y = 0;
            this.speedY = 0;
        }    

        if(this.speedY > 0 && this.y < screenHeight - this.height) {
            this.y += this.speedY;
            if(!(this.number == 1 && DOWN) || (this.number == 1 && B))
                this.speedY--;
        }    
        
        if(this.y > screenHeight - this.height) {
            this.y = screenHeight - this.height;
            this.speedY = 0;
        }

        this.x += this.speedX;
        // debug(this.x, this.y, this.speedX, this. speedY);
        
    }

    render() { 
        setPen(this.color);
        rect(this.x,this.y,this.width, this.height)
    }
}

const lpaddle = new paddle();
const rpaddle = new paddle();
const gameball = new ball();
const ponggame = new game();

function init() {
    screenWidth = getWidth();
    screenHeight = getHeight();
    lpaddle.init();
    lpaddle.x = 2;
    rpaddle.init();
    rpaddle.x = screenWidth - rpaddle.width - 2;
    rpaddle.number = 2;
    rpaddle.color = RED;
    gameball.init();
    ponggame.init();
	gameball.newball();
}

function update(time) {
    ponggame.update();
    lpaddle.update();
    rpaddle.update();
    if (ponggame.ballLaunched == 1 && ponggame.gameover == 0)
        gameball.update();
}

function render() {
    setPen(bgColor);
    clear();
    setPen(txtColor);
    setFont(R.fontAdventurer);
    text("Pong by Jicehel", 2, 5);
    // show score
    setFont(R.fontDonut);
    setPen(YELLOW);
    text("Score : ", 60, 115)
    setPen(GREEN);
    text(ponggame.lscore, 115, 115);
    setPen(YELLOW);
    text("/", 130, 115);
    setPen(RED);
    text(ponggame.rscore, 145, 115);
    ponggame.render();
    if (ponggame.gameover == 0) {
        lpaddle.render();
        rpaddle.render();
        if (ponggame.ballLaunched == 1)
            gameball.render();

    } else {
        setPen(YELLOW);
        if (ponggame.lscore > ponggame.winscore)
            text("Well done left player,", 4, 50);
        else    
            text("Well done right player,", 4, 50);
        text("  you won the game !! ", 10, 70);   
    }

}
